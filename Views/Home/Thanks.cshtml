@model HackSU.ViewModels.StudentClassesViewModel
@{
    ViewData["Title"] = "Thanks";
}

<h1 class="text-center">Class Planner for @Model.Student.Name</h1>
<h2 class="text-center">@Model.Student.degree with @Model.Student.route route</h2>
<h3>Classes offered for this degree:</h3>
<br /> 

<div class="container jumbotron">
    <div class="row">
        <div class="col-lg-4">
            
            <p>Fall 2019 </p>
                   

                    @foreach (HackSU.Models.ClassesModel r in Model.ClassesAvailable)
                    {
                        if (r.QuarterOffered == "Fall")
                        {
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <button type="button" class="btn btn-outline-primary" onclick="myFunction(@r.Credits,this)" id="@r.Name">@r.Name</button>
                    </div>
                </div>
            </div>
                        }

                    }
                    <br />
               
        </div>
        <div class="col-lg-4">
        
                        <p>Winter 2020 </p>
                  

                    @foreach (HackSU.Models.ClassesModel r in Model.ClassesAvailable)
                    {
                        if (r.QuarterOffered == "Winter")
                        {
                            
                                <button type="button" class="btn btn-outline-primary" onclick="myFunction(@r.Credits,this)" id="@r.Name">@r.Name</button>
                                
                        }

                    }
                
        </div>
        <div class="col-lg-4">
            
                        <p>Spring 2020 </p>
                   

                    @foreach (HackSU.Models.ClassesModel r in Model.ClassesAvailable)
                    {
                        if (r.QuarterOffered == "Spring")
                        {
                           
                                <button type="button" class="btn btn-outline-primary" onclick="myFunction(@r.Credits,this)" id="@r.Name">@r.Name</button>
                                
                        }
                    }
               
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-lg-5">
            <h3>Credit Requirements:</h3>
            <br />
        </div>
        <div class="col-lg-7">
            <h3> Requirements For Degree: </h3>
            <br />
            
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-lg-5">
        
            <span> Total number of credits (45 needed): </span>
            <b>
                <span id="demo"></span>
            </b>
        </div>
        <div class="col-lg-7">

            <ul>
                <li>
                    <span id="req1" class="">Need to take Pyhysical Databases and Security</span>
                </li>
                <li>
                    <p id="demo1"></p>
                    <span id="req2" class="">Need to take one of the following: fund of soft<br /> engineering, comp system principles 2, or data structures and algorithms</span>
                </li>

            </ul>
           

           

        </div>
    </div>
</div>

      

        <script>
            var totalCredits = 0;
            var classesTaking = new Array();

            function myFunction(creditsNum, resName) {
                if (resName.className == "btn btn-outline-primary") {
                    classesTaking.push(resName.id);
                    totalCredits += creditsNum;
                    document.getElementById("demo").innerHTML = totalCredits;
                    //document.getElementById("demo1").innerHTML = "Remaining credits you need to take: " + remainCredits;
                    document.getElementById(resName.id).setAttribute("class", "btn btn-primary");

                } else {

                    //todo remove from array
                    var index = classesTaking.indexOf(resName.id);
                    if (index != -1) {
                        classesTaking.splice(index, 1);
                    }



                    totalCredits -= creditsNum;
                    document.getElementById("demo").innerHTML = totalCredits;
                    var remainCredits = 45 - totalCredits;
                    //document.getElementById("demo1").innerHTML = "Remaining credits you need to take: " + remainCredits;
                    document.getElementById(resName.id).setAttribute("class", "btn btn-outline-primary");
                }
                //req1
                if (classesTaking.includes("physical_database_design_&_opt") && classesTaking.includes("security_in_computing")) {
                    document.getElementById("req1").innerHTML = "<del>Need to take Pyhysical Databases and Security</del>";
                    //document.getElementById("req1").setAttribute("class", "alert alert-success");
                } else {
                    document.getElementById("req1").innerHTML = "Need to take Pyhysical Databases and Security";
                }

                //req2
                if (classesTaking.includes("data_structures_and_algorithms") || classesTaking.includes("comp_system_principles_2") || classesTaking.includes("fund_of_software_engineerring")) {
                    document.getElementById("req2").innerHTML = "<del>Need to take one of the following: fund of soft<br /> engineering, comp system principles 2, or data structures and algorithms</del>";
                    //document.getElementById("req2").setAttribute("class", "alert alert-success");
                } else {
                    //document.getElementById("req2").setAttribute("class", "");
                    document.getElementById("req2").innerHTML = "Need to take one of the following: fund of soft<br /> engineering, comp system principles 2, or data structures and algorithms";
                }

            }

        </script>
